{"ast":null,"code":"import axios from 'axios';\nimport io from 'socket.io-client';\nimport setAuthToken from '../utils/setAuthToken';\nimport { useSelector, useDispatch } from 'react-redux';\nimport store from '../store';\nconst socket = io('https://collab-bin.herokuapp.com');\nconst user = store.getState().auth.user; // Auth actions\n\nexport const login = formData => (dispatch, getState) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  axios.post('https://collab-bin.herokuapp.com/auth/login', formData, config).then(res => {\n    console.log(res.data);\n    getUser();\n    dispatch({\n      type: 'LOGIN',\n      payload: res.data\n    });\n  });\n};\nexport const register = formData => (dispatch, getState) => {\n  console.log('state', formData);\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  axios.post('https://collab-bin.herokuapp.com/auth/register', formData, config).then(res => {\n    console.log(res.data);\n    dispatch({\n      type: 'REGISTER',\n      payload: formData\n    });\n  });\n};\nexport const getUser = () => (dispatch, getState) => {\n  setAuthToken(localStorage.token);\n  axios.get('https://collab-bin.herokuapp.com/auth/getUser').then(res => {\n    if (res.data) {\n      console.log('[action]', res.data);\n      dispatch({\n        type: 'SET_USER',\n        payload: res.data\n      });\n    } else {\n      dispatch({\n        type: 'ERROR_USER'\n      });\n    }\n  });\n}; // Stream actions\n\nsocket.on('new message', data => {\n  renderMessages(data);\n});\nexport const renderMessages = data => (dispatch, getState) => {\n  dispatch({\n    type: 'RENDER_MESSAGES',\n    payload: data\n  });\n};\nexport const getStream = () => (dispatch, getState) => {\n  if (user) {\n    console.log('act get stream');\n    axios.get(`https://collab-bin.herokuapp.com/streams/${user._id}`).then(res => {\n      dispatch({\n        type: GET_STREAM,\n        payload: res.data\n      });\n    });\n  }\n};\nexport const resetCurrent = data => (dispatch, getState) => {\n  console.log(data);\n  dispatch({\n    type: 'SET_CURRENT',\n    payload: data\n  });\n};\nexport const selectStream = stream => (dispatch, getState) => {\n  dispatch({\n    type: 'CHOOSE_STREAM',\n    payload: stream\n  });\n};\nexport const sendMessage = obj => (dispatch, getState) => {\n  if (user) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      formData,\n      current\n    } = obj;\n    formData.sender_id = user._id;\n    formData.sender_name = user.name;\n    console.log(formData);\n    axios.post('https://collab-bin.herokuapp.com/streams/send', formData, config).then(res => {\n      dispatch({\n        type: 'SEND_MESSAGE',\n        payload: obj\n      });\n    });\n  }\n};\nexport const createStream = title => (dispatch, getState) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  if (user) {\n    const formData = {\n      title: title.title,\n      owner_id: user._id,\n      owner_name: user.name\n    };\n    axios.post('https://collab-bin.herokuapp.com/streams/create', formData, config).then(res => {\n      dispatch({\n        type: 'CREATE_STREAM',\n        payload: formData\n      });\n    });\n  }\n};\nexport const deleteStream = formData => (dispatch, getState) => {\n  dispatch({\n    type: 'DELETE_STREAM',\n    payload: formData\n  });\n};\nexport const updateStream = formData => (dispatch, getState) => {\n  dispatch({\n    type: 'UPDATE_STREAM',\n    payload: formData\n  });\n};\nexport const joinStream = link => (dispatch, getState) => {\n  const url = `https://collab-bin.herokuapp.com/streams/join/${link}/${user._id}`;\n  axios.get(url).then(res => {\n    dispatch({\n      type: 'JOIN_STREAM',\n      payload: res.data.newStream\n    });\n  });\n};","map":{"version":3,"sources":["/home/mah-nigga/React/ChatApp/client/src/actions/index.js"],"names":["axios","io","setAuthToken","useSelector","useDispatch","store","socket","user","getState","auth","login","formData","dispatch","config","headers","post","then","res","console","log","data","getUser","type","payload","register","localStorage","token","get","on","renderMessages","getStream","_id","GET_STREAM","resetCurrent","selectStream","stream","sendMessage","obj","current","sender_id","sender_name","name","createStream","title","owner_id","owner_name","deleteStream","updateStream","joinStream","link","url","newStream"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport io from 'socket.io-client'\nimport setAuthToken from '../utils/setAuthToken'\nimport { useSelector, useDispatch } from 'react-redux'\nimport store from '../store'\n\nconst socket = io('https://collab-bin.herokuapp.com')\nconst user = store.getState().auth.user\n\n// Auth actions\nexport const login = formData => (dispatch, getState) => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }\n  axios.post('https://collab-bin.herokuapp.com/auth/login', formData, config).then(res => {\n    console.log(res.data)\n    getUser()\n    dispatch ( {\n      type: 'LOGIN',\n      payload: res.data\n    })\n  })\n  \n}\n\nexport const register = formData => (dispatch, getState) => {\n  console.log('state', formData)\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    }\n  }\n  axios.post('https://collab-bin.herokuapp.com/auth/register', formData, config).then(res => {\n    console.log(res.data)\n    dispatch ( {\n      type: 'REGISTER',\n      payload: formData\n    })\n  })\n  \n}\n\nexport const getUser = () => (dispatch, getState) => {\n    setAuthToken(localStorage.token)\n    axios.get('https://collab-bin.herokuapp.com/auth/getUser').then(res => {\n      if (res.data) {\n        console.log('[action]', res.data)\n        dispatch ( {\n          type: 'SET_USER',\n          payload: res.data\n        })\n      } else {\n        dispatch ( {\n          type: 'ERROR_USER'\n        })\n      }\n    }) \n}\n\n// Stream actions\nsocket.on('new message', data => {\n  renderMessages(data)\n})\n\nexport const renderMessages = data => (dispatch, getState) => {\n  dispatch ({\n    type: 'RENDER_MESSAGES',\n    payload: data\n  }) \n}\n\nexport const getStream = () => (dispatch, getState) => {\n  if (user) {\n    console.log('act get stream')\n    axios.get(`https://collab-bin.herokuapp.com/streams/${user._id}`).then(res => {\n      dispatch ({\n        type: GET_STREAM,\n        payload: res.data\n      } )\n    })\n  }\n}\n\nexport const resetCurrent = data => (dispatch, getState) => {\n  console.log(data)\n  dispatch ({\n    type: 'SET_CURRENT',\n    payload: data\n  }) \n}\n\nexport const selectStream = stream => (dispatch, getState) => {\n  dispatch ( {\n    type: 'CHOOSE_STREAM',\n    payload: stream\n  } )\n}\n\nexport const sendMessage = (obj) => (dispatch, getState) => {\n  \n\n  if (user) {\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n    const { formData, current } = obj\n    formData.sender_id = user._id\n    formData.sender_name = user.name\n    console.log(formData)\n\n   axios.post('https://collab-bin.herokuapp.com/streams/send', formData, config).then(res => {\n    dispatch ({\n      type: 'SEND_MESSAGE',\n      payload: obj\n    })\n   })\n  }\n}\n\nexport const createStream = title => (dispatch, getState) => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n  \n  if (user) {\n    const formData = {\n      title: title.title,\n      owner_id: user._id,\n      owner_name: user.name\n    }\n    axios.post('https://collab-bin.herokuapp.com/streams/create', formData, config).then(res => {\n      dispatch ( {\n        type: 'CREATE_STREAM',\n        payload: formData\n      })\n    })\n    \n  }\n}\n\nexport const deleteStream = formData => (dispatch, getState) => {\n  dispatch ( {\n    type: 'DELETE_STREAM',\n    payload: formData\n  })\n}\n\nexport const updateStream = formData => (dispatch, getState) => {\n  dispatch ( {\n    type: 'UPDATE_STREAM',\n    payload: formData\n  })\n}\n\nexport const joinStream = link => (dispatch, getState) => {\n  const url = `https://collab-bin.herokuapp.com/streams/join/${link}/${user._id}`\n  axios.get(url).then(res => {\n    dispatch ( {\n      type: 'JOIN_STREAM',\n      payload: res.data.newStream\n    })\n  })\n}\n"]},"metadata":{},"sourceType":"module"}