{"ast":null,"code":"import { CREATE_STREAM, JOIN_STREAM, GET_STREAM, SEND_MESSAGE, CHOOSE_STREAM, DELETE_STREAM, UPDATE_STREAM } from '../components/context/types';\n\nconst streamReducer = (state = {\n  current: null,\n  streams: [],\n  currentMessage: null,\n  loading: true\n}, action) => {\n  switch (action.type) {\n    case 'GET_STREAM':\n      console.log('red get steam');\n      return { ...state,\n        streams: action.payload,\n        current: action.payload[0],\n        currentMessage: action.payload[0].messages.reverse(),\n        loading: false\n      };\n\n    case 'CHOOSE_STREAM':\n      return { ...state,\n        current: action.payload,\n        currentMessage: action.payload.messages.reverse()\n      };\n\n    case 'SEND_MESSAGE':\n      const {\n        formData,\n        current\n      } = action.payload;\n      return { ...state,\n        current: current,\n        currentMessage: [...state.currentMessage, formData].reverse()\n      };\n\n    case 'RENDER_MESSAGES':\n      return { ...state,\n        current: action.payload,\n        currentMessage: action.payload.messages.reverse()\n      };\n\n    case 'SET_CURRENT':\n      console.log('red-get-user');\n      return { ...state,\n        current: action.payload,\n        currentMessage: action.payload.messages\n      };\n\n    case 'CREATE_STREAM':\n      return { ...state,\n        streams: [...state.streams, action.payload]\n      };\n\n    case 'DELETE_STREAM':\n      return { ...state,\n        streams: state.streams.filter(stream => stream.id !== action.payload.id),\n        current: state.streams[0]\n      };\n\n    case 'JOIN_STREAM':\n      return { ...state,\n        streams: [...state.streams, action.payload]\n      };\n\n    default:\n      return { ...state\n      };\n  }\n};\n\nexport default streamReducer;","map":{"version":3,"sources":["/home/mah-nigga/React/ChatApp/client/src/reducers/streams.js"],"names":["CREATE_STREAM","JOIN_STREAM","GET_STREAM","SEND_MESSAGE","CHOOSE_STREAM","DELETE_STREAM","UPDATE_STREAM","streamReducer","state","current","streams","currentMessage","loading","action","type","console","log","payload","messages","reverse","formData","filter","stream","id"],"mappings":"AAAA,SACEA,aADF,EAEEC,WAFF,EAGEC,UAHF,EAIEC,YAJF,EAKEC,aALF,EAMEC,aANF,EAOEC,aAPF,QAQO,6BARP;;AAUA,MAAMC,aAAa,GAAG,CAACC,KAAK,GAAG;AAC3BC,EAAAA,OAAO,EAAE,IADkB;AAE3BC,EAAAA,OAAO,EAAE,EAFkB;AAG3BC,EAAAA,cAAc,EAAE,IAHW;AAI3BC,EAAAA,OAAO,EAAE;AAJkB,CAAT,EAKnBC,MALmB,KAKR;AAEZ,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,YAAL;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACE,aAAO,EACL,GAAGR,KADE;AAELE,QAAAA,OAAO,EAAEG,MAAM,CAACI,OAFX;AAGLR,QAAAA,OAAO,EAAEI,MAAM,CAACI,OAAP,CAAe,CAAf,CAHJ;AAILN,QAAAA,cAAc,EAAEE,MAAM,CAACI,OAAP,CAAe,CAAf,EAAkBC,QAAlB,CAA2BC,OAA3B,EAJX;AAKLP,QAAAA,OAAO,EAAE;AALJ,OAAP;;AAOF,SAAK,eAAL;AACE,aAAO,EACL,GAAGJ,KADE;AAELC,QAAAA,OAAO,EAAEI,MAAM,CAACI,OAFX;AAGLN,QAAAA,cAAc,EAAEE,MAAM,CAACI,OAAP,CAAeC,QAAf,CAAwBC,OAAxB;AAHX,OAAP;;AAKF,SAAK,cAAL;AACE,YAAM;AAAEC,QAAAA,QAAF;AAAYX,QAAAA;AAAZ,UAAwBI,MAAM,CAACI,OAArC;AACA,aAAO,EACL,GAAGT,KADE;AAELC,QAAAA,OAAO,EAAEA,OAFJ;AAGLE,QAAAA,cAAc,EAAE,CAAC,GAAGH,KAAK,CAACG,cAAV,EAA0BS,QAA1B,EAAoCD,OAApC;AAHX,OAAP;;AAKF,SAAK,iBAAL;AACE,aAAO,EACL,GAAGX,KADE;AAELC,QAAAA,OAAO,EAAEI,MAAM,CAACI,OAFX;AAGLN,QAAAA,cAAc,EAAEE,MAAM,CAACI,OAAP,CAAeC,QAAf,CAAwBC,OAAxB;AAHX,OAAP;;AAKF,SAAK,aAAL;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACE,aAAO,EACL,GAAGR,KADE;AAELC,QAAAA,OAAO,EAAEI,MAAM,CAACI,OAFX;AAGLN,QAAAA,cAAc,EAAEE,MAAM,CAACI,OAAP,CAAeC;AAH1B,OAAP;;AAKF,SAAK,eAAL;AACE,aAAO,EACL,GAAGV,KADE;AAELE,QAAAA,OAAO,EAAE,CAAC,GAAGF,KAAK,CAACE,OAAV,EAAmBG,MAAM,CAACI,OAA1B;AAFJ,OAAP;;AAIF,SAAK,eAAL;AACE,aAAO,EACL,GAAGT,KADE;AAELE,QAAAA,OAAO,EAAEF,KAAK,CAACE,OAAN,CAAcW,MAAd,CAAqBC,MAAM,IAAIA,MAAM,CAACC,EAAP,KAAcV,MAAM,CAACI,OAAP,CAAeM,EAA5D,CAFJ;AAGLd,QAAAA,OAAO,EAAED,KAAK,CAACE,OAAN,CAAc,CAAd;AAHJ,OAAP;;AAKF,SAAK,aAAL;AACE,aAAO,EACL,GAAGF,KADE;AAELE,QAAAA,OAAO,EAAE,CAAC,GAAGF,KAAK,CAACE,OAAV,EAAmBG,MAAM,CAACI,OAA1B;AAFJ,OAAP;;AAIF;AACE,aAAO,EACL,GAAGT;AADE,OAAP;AArDJ;AAyDG,CAhEL;;AAkEE,eAAeD,aAAf","sourcesContent":["import {\n  CREATE_STREAM,\n  JOIN_STREAM,\n  GET_STREAM,\n  SEND_MESSAGE,\n  CHOOSE_STREAM,\n  DELETE_STREAM,\n  UPDATE_STREAM\n} from '../components/context/types'\n\nconst streamReducer = (state = {\n    current: null,\n    streams: [],\n    currentMessage: null,\n    loading: true\n}, action) => {\n\n  switch (action.type) {\n    case 'GET_STREAM': \n    console.log('red get steam')\n      return {\n        ...state,\n        streams: action.payload,\n        current: action.payload[0],\n        currentMessage: action.payload[0].messages.reverse(),\n        loading: false\n      }\n    case 'CHOOSE_STREAM': \n      return {\n        ...state,\n        current: action.payload,\n        currentMessage: action.payload.messages.reverse()\n      }\n    case 'SEND_MESSAGE': \n      const { formData, current } = action.payload\n      return {\n        ...state,\n        current: current,\n        currentMessage: [...state.currentMessage, formData].reverse()\n      }\n    case 'RENDER_MESSAGES':\n      return {\n        ...state,\n        current: action.payload,\n        currentMessage: action.payload.messages.reverse()\n      }\n    case 'SET_CURRENT': \n    console.log('red-get-user')\n      return {\n        ...state,\n        current: action.payload,\n        currentMessage: action.payload.messages\n      }\n    case 'CREATE_STREAM': \n      return {\n        ...state,\n        streams: [...state.streams, action.payload]\n      }\n    case 'DELETE_STREAM':\n      return {\n        ...state,\n        streams: state.streams.filter(stream => stream.id !== action.payload.id),\n        current: state.streams[0]\n      }\n    case 'JOIN_STREAM': \n      return {\n        ...state,\n        streams: [...state.streams, action.payload]\n      }\n    default: \n      return {\n        ...state\n      }\n      }\n    }\n\n  export default streamReducer"]},"metadata":{},"sourceType":"module"}