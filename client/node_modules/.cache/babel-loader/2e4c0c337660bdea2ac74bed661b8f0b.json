{"ast":null,"code":"import axios from 'axios';\nimport io from 'socket.io-client';\nimport setAuthToken from '../utils/setAuthToken';\nimport { useSelector } from 'react-redux';\nimport { CREATE_STREAM, JOIN_STREAM, GET_STREAM, SEND_MESSAGE, CHOOSE_STREAM, DELETE_STREAM, UPDATE_STREAM, LOGIN, REGISTER } from '../context/types';\nconst socket = io('https://collab-bin.herokuapp.com'); // Auth actions\n\nexport const login = async formData => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const res = await axios.post('https://collab-bin.herokuapp.com/auth/login', formData, config);\n  console.log(res.data);\n  getUser();\n  return {\n    type: LOGIN,\n    payload: res.data\n  };\n};\nexport const register = async formData => {\n  console.log('state', formData);\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  };\n  const res = await axios.post('https://collab-bin.herokuapp.com/auth/register', formData, config);\n  console.log(res.data);\n  return {\n    type: REGISTER,\n    payload: formData\n  };\n};\nexport const getUser = async () => {\n  setAuthToken(localStorage.token);\n  const res = await axios.get('https://collab-bin.herokuapp.com/auth/getUser');\n\n  if (res.data) {\n    return {\n      type: 'SET_USER',\n      payload: res.data\n    };\n  } else {\n    return {\n      type: 'ERROR_USER'\n    };\n  }\n}; // Stream actions\n\nsocket.on('new message', data => {\n  renderMessages(data);\n});\nexport const renderMessages = data => {\n  return {\n    type: 'RENDER_MESSAGES',\n    payload: data\n  };\n};\nexport const getStream = async () => {\n  const user = useSelector(state => state.auth.user);\n\n  if (user) {\n    const res = await axios.get(`https://collab-bin.herokuapp.com/streams/${user._id}`);\n    return {\n      type: GET_STREAM,\n      payload: res.data\n    };\n  }\n};\nexport const resetCurrent = async data => {\n  console.log(data);\n  return {\n    type: 'SET_CURRENT',\n    payload: data\n  };\n};\nexport const selectStream = stream => {\n  return {\n    type: CHOOSE_STREAM,\n    payload: stream\n  };\n};\nexport const sendMessage = async obj => {\n  const user = useSelector(state => state.auth.user);\n\n  if (user) {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const {\n      formData,\n      current\n    } = obj;\n    formData.sender_id = user._id;\n    formData.sender_name = user.name;\n    console.log(formData);\n    await axios.post('https://collab-bin.herokuapp.com/streams/send', formData, config);\n    return {\n      type: SEND_MESSAGE,\n      payload: obj\n    };\n  }\n};\nexport const createStream = async title => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const user = useSelector(state => state.auth.user);\n\n  if (user) {\n    const formData = {\n      title: title.title,\n      owner_id: user._id,\n      owner_name: user.name\n    };\n    const res = await axios.post('https://collab-bin.herokuapp.com/streams/create', formData, config);\n    return {\n      type: CREATE_STREAM,\n      payload: formData\n    };\n  }\n};\nexport const deleteStream = formData => {\n  return {\n    type: DELETE_STREAM,\n    payload: formData\n  };\n};\nexport const updateStream = formData => {\n  return {\n    type: UPDATE_STREAM,\n    payload: formData\n  };\n};\nexport const joinStream = async link => {\n  const user = useSelector(state => state.auth.user);\n  const url = `https://collab-bin.herokuapp.com/streams/join/${link}/${user._id}`;\n  const res = await axios.get(url);\n  return {\n    type: JOIN_STREAM,\n    payload: res.data.newStream\n  };\n};","map":{"version":3,"sources":["/home/mah-nigga/React/ChatApp/client/src/actions/index.js"],"names":["axios","io","setAuthToken","useSelector","CREATE_STREAM","JOIN_STREAM","GET_STREAM","SEND_MESSAGE","CHOOSE_STREAM","DELETE_STREAM","UPDATE_STREAM","LOGIN","REGISTER","socket","login","formData","config","headers","res","post","console","log","data","getUser","type","payload","register","localStorage","token","get","on","renderMessages","getStream","user","state","auth","_id","resetCurrent","selectStream","stream","sendMessage","obj","current","sender_id","sender_name","name","createStream","title","owner_id","owner_name","deleteStream","updateStream","joinStream","link","url","newStream"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport io from 'socket.io-client'\nimport setAuthToken from '../utils/setAuthToken'\nimport { useSelector } from 'react-redux'\nimport {\n  CREATE_STREAM,\n  JOIN_STREAM,\n  GET_STREAM,\n  SEND_MESSAGE,\n  CHOOSE_STREAM,\n  DELETE_STREAM,\n  UPDATE_STREAM,\n\n  LOGIN,\n  REGISTER\n} from '../context/types'\n\nconst socket = io('https://collab-bin.herokuapp.com')\n\n// Auth actions\nexport const login = async formData => {\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }\n  const res = await axios.post('https://collab-bin.herokuapp.com/auth/login', formData, config)\n  console.log(res.data)\n  getUser()\n  return {\n    type: LOGIN,\n    payload: res.data\n  }\n}\n\nexport const register = async formData => {\n  console.log('state', formData)\n  const config = {\n    headers: {\n      \"Content-Type\": \"application/json\",\n    }\n  }\n  const res = await axios.post('https://collab-bin.herokuapp.com/auth/register', formData, config)\n  console.log(res.data)\n  return {\n    type: REGISTER,\n    payload: formData\n  }\n}\n\nexport const getUser = async () => {\n  setAuthToken(localStorage.token)\n  const res = await axios.get('https://collab-bin.herokuapp.com/auth/getUser')\n  if (res.data) {\n    return {\n      type: 'SET_USER',\n      payload: res.data\n    }\n  } else {\n    return {\n      type: 'ERROR_USER'\n    }\n  }\n}\n\n// Stream actions\nsocket.on('new message', data => {\n  renderMessages(data)\n})\n\nexport const renderMessages = data => {\n  return {\n    type: 'RENDER_MESSAGES',\n    payload: data\n  } \n}\n\nexport const getStream = async () => {\n  const user = useSelector(state => state.auth.user)\n\n  if (user) {\n    const res = await axios.get(`https://collab-bin.herokuapp.com/streams/${user._id}`)\n    return {\n      type: GET_STREAM,\n      payload: res.data\n    } \n  }\n}\n\nexport const resetCurrent = async data => {\n  console.log(data)\n  return {\n    type: 'SET_CURRENT',\n    payload: data\n  } \n}\n\nexport const selectStream = stream => {\n  return {\n    type: CHOOSE_STREAM,\n    payload: stream\n  } \n}\n\nexport const sendMessage = async obj => {\n  const user = useSelector(state => state.auth.user)\n\n  if (user) {\n\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n    const { formData, current } = obj\n    formData.sender_id = user._id\n    formData.sender_name = user.name\n    console.log(formData)\n\n    await axios.post('https://collab-bin.herokuapp.com/streams/send', formData, config)\n\n    return {\n      type: SEND_MESSAGE,\n      payload: obj\n    }\n  }\n}\n\nexport const createStream = async title => {\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  }\n  const user = useSelector(state => state.auth.user)\n\n  if (user) {\n    const formData = {\n      title: title.title,\n      owner_id: user._id,\n      owner_name: user.name\n    }\n    const res = await axios.post('https://collab-bin.herokuapp.com/streams/create', formData, config)\n    return {\n      type: CREATE_STREAM,\n      payload: formData\n    }\n  }\n}\n\nexport const deleteStream = formData => {\n  return {\n    type: DELETE_STREAM,\n    payload: formData\n  }\n}\n\nexport const updateStream = formData => {\n  return {\n    type: UPDATE_STREAM,\n    payload: formData\n  }\n}\n\nexport const joinStream = async link => {\n  const user = useSelector(state => state.auth.user)\n\n  const url = `https://collab-bin.herokuapp.com/streams/join/${link}/${user._id}`\n  const res = await axios.get(url)\n  return {\n    type: JOIN_STREAM,\n    payload: res.data.newStream\n  }\n}\n"]},"metadata":{},"sourceType":"module"}